import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int lnum, int cnum) {
        linenum = lnum;
        charnum = cnum;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lnum, int cnum, int val) {
        super(lnum, cnum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
LETTER=       [A-Za-z]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

\n        { CharNum.num = 1; }

"bool" { 
		Symbol S = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"receive" { 
		Symbol S = new Symbol(sym.RECEIVE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"int" { 
		Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"print" { 
		Symbol S = new Symbol(sym.PRINT, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"void" { 
		Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"if" { 
		Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"tru" { 
		Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}


"else" { 
		Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}


"fls" { 
		Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"while" { 
		Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"struct" { 
		Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"ret" { 
		Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}		

	

({LETTER}|'_')('_'|{LETTER}|{DIGIT})* {	//Identifier
		Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
		CharNum.num += yytext().length();
		return S;
	}
	
	

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            int val = 0;
            try {
            	val = (new Integer(yytext())).intValue();
            	} catch (Exception e) {
            		val = Integer.MAX_VALUE;
            		ErrMsg.warn(yyline+1, CharNum.num, "integer literal too large; using max value");
            	} finally {
            	Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            	CharNum.num += yytext().length();
            	return S;
            	
            	}
          }
         
 
 
\"(([^\n\t\"\\]|\\[nt'\"?\\]))*\"	{	//String Literal
		Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
		CharNum.num += yytext().length();
		return S;
	}


"{"	{ 
		Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"," { 
		Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	

"--" { 
		Symbol S = new Symbol(sym.MINUMINUS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	

"!" { 
		Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"<" { 
		Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"}" { 
		Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
"." { 
		Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"+" { 
		Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"&&" { 
		Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
">" { 
		Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"(" { 
		Symbol S = new Symbol(sym.LPARENS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	

"<<" {	//TODO: write?
		Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"-" { 
		Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"||" { 
		Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}	
	
	
"<=" { 
		Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
")" { 
		Symbol S = new Symbol(sym.RPARENS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
">>" {	//TODO: READ?
		Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"*" { 
		Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"==" { 
		Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
">=" { 
		Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
";" { 
		Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"++" { 
		Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"/" { 
		Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"!=" { 
		Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}
	
	
"=" { 
		Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
		CharNum.num += yytext().length();
		return S;
	}				
	


((###)|(\/\/\/))+.*(\n) { CharNum.num = 1; }



\"(([^\n\t\"\\]|\\[nt'\"?\\]))*(([^\"])|(\n))*	{	//Unterminated String Literals
		ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal ignored");
		CharNum.num = 1;
	}
		


\"(([^\n\t\"\\]|\\[nt'\"?\\])|\\[^nt'\"?\\])*\"	{	//Bad String Literals
		ErrMsg.fatal(yyline+1, CharNum.num, "string literal with bad escaped character ignored");
		CharNum.num = 1;
	}
	
	

\"(([^\n\t\"\\]|\\[nt'\"?\\])|\\[^nt'\"?\\])*(([^\"])|(\n))* {	//Unterminated Bad String Literals
		ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal with bad escaped character ignored");
	}
	
																				
{WHITESPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
        
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
          

 			
